import React ,{useCallback}from 'react'
import { useForm } from 'react-hook-form'
import  Button  from './button/Button'
import Input from "./inputForm/InpurForm"
import Select from "./select/Select"
import RTE from "./RTE"
import appwriteServices from "../appwrite/config"
import { useNavigate } from 'react-router-dom'
import { useSelector } from 'react-redux'


function PostForm({post}) {
    console.log("Type of post:", typeof post);
    console.log(post);
    const {register,handleSubmit,watch,setValue,control,getValues} = useForm({
        defaultValues:{
            title:post?.title || '',
            url : post?.$id || '',
            content : post?.content || "",
            status : post?.status || 'active'
        }
    })
    const navigate = useNavigate()
    const userData = useSelector(state => state.user.userDetail)
    console.log("Type of post:", typeof post);
    console.log(post);

    const submit = async (data)=> {
        if (post) {
            console.log("loded");
          const file = data.image[0] ? await appwriteServices.uploadFile(data.image[0]) : null
         let id = file && file.$id
            console.log("new featured img lid",file);
          if (file) {
            console.log(post.featuredImage);
            appwriteServices.deleteFile(post.featuredImage)
          }
          console.log("data ",data);
          let now = new Date()
         let Cdate =  now.getTime()
         let hour = now.getHours();
         let min = now.getMinutes();
         
         let period = 'AM';
         
         if (hour >= 12) {
             period = 'PM';
             hour = hour % 12; // Convert to 12-hour format
         }
         
         // Ensure hour is not 0 for 12 AM
         if (hour === 0) {
             hour = 12;
         }

        let time = `updated on ${hour} : ${min} : ${period} `;
         console.log(Cdate);
          const dbPost = await appwriteServices.updateDocument(post.$id,{
            ...data,
             featuredImage: file ? id : undefined ,
             date : Cdate,
             time :time

            //  TODO: featured image should be of post
          })
          console.log(dbPost);
          if (dbPost) {
            navigate(`/post/${dbPost.$id}`)
            
          }
        }


        else{
            let date = new Date()
            console.log(data);
            const file = await appwriteServices.uploadFile(data.image[0])
            console.log('file ',file);

             if (file) {
               const fileId =  file.$id
              let now = new Date()
                let Cdate =  date.getTime()
                let hour = now.getHours();
                let min = now.getMinutes();
                
                let period = 'AM';
                
                if (hour >= 12) {
                    period = 'PM';
                    hour = hour % 12; // Convert to 12-hour format
                }
                
                // Ensure hour is not 0 for 12 AM
                if (hour === 0) {
                    hour = 12;
                }
                if(hour < 10){
                    hour = `0${hour}`
                }
                if(min < 10){
                    min = `0${min}`
                }
       
               let time = `${hour} : ${min} : ${period}`;
               data.featuredImage = fileId
              console.log(typeof Cdate)
              const dbPost = await appwriteServices.createDocument({
                ...data,
                user_Id: userData.$id,
                date :Cdate,
                time:time
               })
               console.log('user_Id', userData.$id);
               console.log('dbpost ',dbPost);
               if (dbPost) {
                navigate(`/post/${dbPost.$id}`)
               }
              }
        }
    }

    const slugTransform = useCallback((value) => {
        if (value && typeof value === "string")
            return value
                .trim()
                .toLowerCase()
                .replace(/[^a-zA-Z\d\s]+/g, "-")
                .replace(/\s/g, "-");

        return "";
    }, []);

    React.useEffect(() => {
        const subscription = watch((value, { name }) => {
            if (name === "title") {
                setValue("url", slugTransform(value.title), { shouldValidate: true });
            }
        });

        return () => subscription.unsubscribe();
    }, [watch, slugTransform, setValue]);


  return (
    <form onSubmit={handleSubmit(submit)} className="flex flex-wrap">
    <div className="w-2/3 px-2">

        {/* Title */}
        <Input
            label="Title :"
            placeholder="Title"
            className="mb-4"
            {...register("title", { required: true })}
        />

        {/* AutoGenerated SLug */}
        <Input
            label="Slug :"
            placeholder="Slug"
            className="mb-4"
            {...register("url", { required: true })}
            onInput={(e) => {
                setValue("url", slugTransform(e.currentTarget.value), { shouldValidate: true });
            }}
        />

{/* RTE */}
        <RTE label="Content :" name="content" control={control} defaultValue={getValues("content")} />
    </div>
    <div className="w-1/3 px-2">
            {/* Image upload */}


        <Input
            label="Featured Image :"
            type="file"
            className="mb-4"
            accept="image/png, image/jpg, image/jpeg, image/gif"
            {...register("image", { required: !post })}
        />
        {/* Show previous image if updating */}
        {post && (
            <div className="w-full mb-4">
                <img
                    src={appwriteServices.getFilePreview(post.featuredImage)}
                    alt={post.title}
                    className="rounded-lg"
                />
            </div>
        )}
        <Select
            options={["active", "inactive"]}
            label="Status"
            className="mb-4"
            {...register("status", { required: true })}
        />
        <Button type="submit" bgColor={post ? "bg-green-500" : undefined} className="w-full">
            {post ? "Update" : "Submit"}
        </Button>
    </div>
</form>
  )
}

export default PostForm